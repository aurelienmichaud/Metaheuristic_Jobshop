#!/bin/bash


base_dir=$(pwd)
instances_dir=$base_dir/instances/
stats_dir=$base_dir/resources/stats/
build_dir=$base_dir/build/
svg_dir=$stats_dir/instances_SVGs/
graph_dir=$stats_dir/graph/


usage () {
	echo "Usage:"
	echo -e "$0 main [--solver] SOLVER [--instance] INSTANCE\t\t: Run SOLVER algorithm on instance INSTANCE. Please run '$0 main' for more information"
	echo -e "$0 other JAVA_CLASS\t\t\t\t\t\t: Run the class JAVA_CLASS's main method"
	echo -e "$0 test Your.Package.TestClass\t\t\t\t: Run JUnit test class"
	echo -e "$0 stats SOLVER\t\t\t\t\t\t: Run stats script to get the stats of the solver running on ALL instances. Please run '$0 stats' for information on averages"
	echo -e "$0 clean\t\t\t\t\t\t\t: gradle clean"
	echo -e "$0 build\t\t\t\t\t\t\t: gradle build"
	echo -e "$0 graph best|runtime|makespan|distance\t\t\t: Generate a html/js line graph comparing all the algorithms stats and open that graph in firefox"
	echo -e "$0 draw PATH_TO_INSTANCE\t\t\t\t\t: Generate a svg graph file representing the instance problem and open svg file in firefox"
	exit 1
}

usage_main () {
	echo "Usage:"
	echo -e "./run main SOLVER INSTANCE\t\t\t\t\t\t\t: Basically doing 'java -jar build/libs/JSP.jar --solver SOLVER --instance INSTANCE'"
	echo -e "./run main -b SOLVER INSTANCE\t\t\t\t\t\t\t: 'gradle build' and 'gradle jar' is performed before running the program"
	echo -e "./run main --solver SOLVER [SOLVER2...] --instance INSTANCE [INSTANCE2...]\t: Running each solver SOLVERs on INSTANCEs."
	echo -e "./run main -b --solver SOLVER [SOLVER2...] --instance INSTANCE [INSTANCE2...]\t: Compiling & Running each solver SOLVERs on INSTANCEs."
	exit 1
}

usage_other () {
	echo "Usage: ./run other [-b] Your.Package.Class"
	echo -e "\t-b : build before running the class"
	exit 1
}

usage_stats () {
	echo "Usage :"
	echo -e "$0 stats SOLVER\t\t\t: Get the statistics by running the solver on every available instance once"
	echo -e "$0 stats average NB_OF_RUNS SOLVER\t: Get the average statistics by running the solver on every available instance NB_OF_RUNS times. Handy for random solvers statistics"
	exit 1
}

usage_test () {
	echo "Usage: $0 test your.package.TestClass"
	echo "e.g. $0 test jobshop.encodings.EncodingTests"
	exit 1
}

usage_draw () {
	echo "Usage: $0 draw PATH_TO_INSTANCE"
	echo "e.g. $0 draw $instances_dir/ft06"
	exit 1
}

usage_graph () {
	echo "Usage: $0 graph best|runtime|makespan|distance"
	echo "e.g. $0 graph distance"
	exit 1
}


#########################################
# 		./run main		#
#########################################

build_main () {
	gradle build || exit 1
	gradle jar || exit 1
}

launch_main () {
	java -jar build/libs/JSP.jar --solver $solver --instance $instance
}

run_main () {

	if [[ $# -lt 2 ]]; then
		usage_main
	fi

	solver=$1
	instance=$2

	if [[ $# -eq 3 ]]; then
		if [[ $1 == "-b" ]]; then
			build_main
			solver=$2
			instance=$3	
		else
			usage_main
		fi
	elif [[ $# -gt 3 ]]; then
		if [[ $1 == "-b" ]]; then
			build_main
			main_args=$@
			main_args=${args[@]:2}
		else
			main_args=$@
		fi

		java -jar build/libs/JSP.jar ${main_args[@]} 
		exit 0
	fi

	launch_main || (build_main && launch_main)
}


#########################################
# 		./run other		#
#########################################

build_other () {
	cd $base_dir && gradle build
}

launch_other () {

	cd $1 && (java $2)
}


run_other () {
	class_dir="$build_dir/classes/java/main/"

	if [[ $# -eq 0 ]]; then
		usage_other
	fi

	if [[ $# -eq 2 ]]; then
		if [[ $1 -eq "-b" ]]; then
			gradle build || exit 1
			class=$2
			echo -e "\n=== java $class ===\n"
		else
			usage_other
		fi
	else
		class=$1
	fi

	launch_other $class_dir $class || (build_other && launch_other $class_dir $class)
}

#########################################
# 		./run test		#
#########################################

run_test () {

	if [[ $# -ne 1 ]]; then
		usage_test 
	fi

	set -x

	gradle test --info > /dev/null

	gradle test --tests $1 || exit 1

	firefox	./build/reports/tests/test/index.html
}


#########################################
# 		./run stats		#
#########################################

solver_stat_file_extension=".stats"
available_instance_json_file="$stats_dir/instances.json"
# We have a file listing all the solvers which have been './run stats'ed
# So that the JavaScript json parser will know exactly what file to fetch
# in order to get those statistics
available_solver_stats_file="$stats_dir/available_solver_stats"
available_solver_stats_file_json="$available_solver_stats_file.json"

available_solver_stats_file_to_json () {

	firsttime=1

	echo "{\"solvers\": [" > $available_solver_stats_file_json

	while read solver json_file_path; do
		if [[ $firsttime -eq 0 ]]; then
			echo "," >> $available_solver_stats_file_json
		else
			firsttime=0
		fi
		(
			echo "{"
			echo "\"name\": \"$solver\","
			echo "\"path\": \"$json_file_path\""
			echo "}"
		) >> $available_solver_stats_file_json
	done < $available_solver_stats_file

	echo "]}" >> $available_solver_stats_file_json
}

# $1	: solver name
# $2	: json stats file path
add_available_solver_stats_json () {

	(touch $available_solver_stats_file && cat $available_solver_stats_file && echo "$1 $2") | sort -u -o "$available_solver_stats_file"

	available_solver_stats_file_to_json
}

# $1	: json file which we will write into
# $2	: solver name
open_json_file () {
	(
		echo "{"
		echo "\"solver\": \"$2\","
		echo "\"stats\":["
	) > $1
}

# $1	: json file which we will write (append) into
# $2	: instance name
# $3	: size
# $4 	: best
# $5	: runtime
# $6	: makespan
# $7	: distance
write_run_into_json () {
	(
		echo "{"
			echo "\"instance\": \"$2\","
			echo "\"size\": \"$3\","
			echo "\"best\": $4,"
			echo "\"runtime\": $5,"
			echo "\"makespan\": $6,"
			echo "\"distance\": $7"
		echo "}"
	) >> $1
}

# $1	: json file which we will write into
close_json_file () {
	echo "]}" >> $1
}

# $1	: stats file which will be translated
# $2	: json file which will be written
# $3	: solver name
stats2json () {

	echo "{ \"instances\" : [" > $available_instance_json_file

	open_json_file $2 $3

	firsttime=1
	while read instance size best runtime makespan distance; do
		if [[ $firsttime -eq 0 ]]; then
			echo "," >> $output_json
			echo "," >> $available_instance_json_file
		else
			firsttime=0
		fi
		write_run_into_json $2 $instance $size $best $runtime $makespan $distance
		echo "\"$instance\"" >> $available_instance_json_file
	done < $1

	close_json_file $2

	echo "]}" >> $available_instance_json_file
}

# $1	: solver name
# OR
# $1	: 'average'
# $2 	: the number of times we will run the solver on each instance
#	  in order to get the average
# $3 	: solver name
run_stats () {

	# Only one argument means casual statistics
	if [[ $# -eq 1 ]]; then

		output_stat_file="$stats_dir/$1$solver_stat_file_extension"

		for instance in $(ls -1 $instances_dir); do
			if [[ $instance != "README.md" ]]; then
				line=$($base_dir/run main $1 $instance | grep $instance)

				if [[ $line != "" ]]; then

					echo $line >> $output_stat_file
					echo "> $instance <"
				fi
			fi
		done


	# './run stats average NB SOLVER' means we need to run the solver SOLVER
	# NB times on each instance and provide an average result
	elif [[ $# -eq 3 ]] && [[ $1 == "average" ]] && [[ $2 != "0" ]]; then

		output_stat_file="$stats_dir/$3$solver_stat_file_extention"

		echo "" > $output_stat_file

		echo "=== AVERAGING RESULTS OF $3 ($output_stat_file) ==="

		for instance in $(ls -1 $instances_dir); do

			if [[ $instance != "README.md" ]]; then

				alright=1

				average_line=0
				average_size=0
				average_best=0
				average_runtime="0"
				average_makespan="0"
				average_distance="0"

				for i in $(seq $2 || usage_stats); do
					line=$($base_dir/run main $3 $instance | grep $instance)

					if [[ $line != "" ]]; then
						read rubbish size best runtime makespan distance <<< $line
						
						#echo "READING [$size $best $runtime $makespan $distance]"

						average_size=$size
						average_best=$best
						average_runtime=$(awk -c "BEGIN {print $average_runtime+($runtime)}")
						average_makespan=$(awk -c "BEGIN {print $average_makespan+($makespan)}")
						average_distance=$(awk -c "BEGIN {print $average_distance+($distance)}")

						#echo "OUTPUTTING [$average_size $average_best $average_runtime $average_makespan $average_distance]"
						#echo ""

						alright=1

						echo "> $instance[$i] <"
					else
						alright=0
					fi
				done
				if [[ $alright -eq 1 ]]; then
					average_runtime=$(awk -c "BEGIN {print $average_runtime/($2)}")
					average_makespan=$(awk -c "BEGIN {print $average_makespan/($2)}")
					average_distance=$(awk -c "BEGIN {print $average_distance/($2)}")

					#echo -e "\n"
					echo "$instance $average_size $average_best $average_runtime $average_makespan $average_distance" >> $output_stat_file
					#echo -e "\n"
				fi
			fi
		done
	
	else 
		usage_stats
	fi

	output_json="$output_stat_file.json"
	add_available_solver_stats_json $1 $output_json

	stats2json $output_stat_file $output_json $1
}


#########################################
# 		./run graph		#
#########################################

run_graph () {
	if [[ $# -eq 0 ]]; then
		usage_graph
	fi
	cd $graph_dir && ./generate_html_graph $1
}


#########################################
# 		./run draw		#
#########################################

write_svg_start () {
	echo "START -> <J$2,T$3,M$4> [label = \"\"]" >> $1
}

write_svg () {
	echo "<J${2},T${3},M${4}> -> <J${5},T$6,M$7> [label = \"$8\"]" >> $1
}

write_svg_end () {
	echo "<J$2,T$3,M$4> -> END [label = \"$5\"]" >> $1
}

# Translate an instance file into a svg graph file
run_draw () {

	# Test wether the 'dot' command is installed
	which dot &> /dev/null
	# Otherwise we can't write the svg file
	if [[ $? -eq 1 ]]; then
		echo "'dot' command not found, please install 'dot' utility in order to produce svg content"
		exit 1
	fi

	if [[ $# -eq 0 ]]; then
		usage_draw
	fi

	for instance in $@; do
		if [ -r $instance ]; then
			instance_name=$(tr -d './' <<< $instance)
			output_file=$svg_dir/$instance_name.dot

			(
				echo "digraph finite_state_machine {"
				echo "rankdir=LR;"
				echo "node [shape = circle];"	
			) > $output_file

			job=0
			for job_line in $(grep -E "^[^#]" $instance | tail -n +2 | tr ' ' '_'); do
				firsttime=1
				new_task=1
				machine=0
				duration=0
				task=0
				for el in $(tr '_' ' ' <<< $job_line); do

					if [[ $firsttime -eq 1 ]]; then
						firsttime=$((1-$firsttime))
						machine=$(echo "$el")
						write_svg_start $output_file $job $task $machine
						#echo "<START> -> <${job}|${task}|${machine}> [label = \"\"]" >> $output_file
					else
						if [ $new_task == 1 ]; then
							write_svg $output_file $job $task $machine $job $(expr $task + 1) $el $duration
							#echo "<${job}|${task}|${machine}> -> <${job}|$(expr ${task} + 1)|${el}> [label = \"${duration}\"]" >> $output_file
							machine=$(echo "$el")
							task=$(($task + 1))
						else
							duration=$(echo "$el")
						fi
					fi

					new_task=$((1-$new_task))
				done
				write_svg_end $output_file $job $task $machine $duration
				#echo "<${job}|${task}|${machine}> -> <END> [label = \"$duration\"]" >> $output_file
				job=$(($job + 1))
			done

			echo "}" >> $output_file
			
			dot -Tsvg $output_file > $svg_dir/$instance_name.svg && rm $output_file && firefox $svg_dir/$instance_name.svg
		fi
	done
}



#########################################
# 		./run *			#
#########################################

if [[ $# -lt 1 ]]; then
	usage
fi

args=($@)

case "$1" in

	"main")
		run_main ${args[@]:1}
		;;

	"other")
		run_other ${args[@]:1}
		;;

	"test")
		run_test ${args[@]:1}
		;;

	"stats")
		run_stats ${args[@]:1}
		;;

	"graph" )
		run_graph ${args[@]:1}
		;;

	"clean")
		gradle clean
		;;

	"build")
		gradle build
		;;

	"draw")
		run_draw ${args[@]:1}
		;;

	*)
		usage
		;;
esac

